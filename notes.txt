Probando hooks:

-Para probar hooks, vamos a instalar react-hooks-testing-library.
-npm i -d @testing-library/react-hooks
-Para ver un ejemplo facil: https://github.com/testing-library/react-hooks-testing-library
-Debemos tener instalado react-test-renderer: npm install --save-dev react-test-renderer

Custom Hook usado:
  -El custom hook lo sacamos de https://usehooks.com/.
  -Este recibe dos parametros, el key a obtener del LS, y el valor inicial
    de ella.
  -Tiene un estado, donde su valor es una función que ve primero sí ya
    tenemos un valor en LS con ese key, en ese caso lo devuelve.
  -Sí no tiene, coloca el 2do parametro, como valor de ese key.
  -Tiene una función que cambia el estado, y cambia el LS, colocandole a la
    key del 2do param. el valor pasado por parametro a esta función.

Importar:
  -El custom hook.
  -renderHook, act: @testing-library/react-hooks
    .renderHook: Renderiza un componente donde se coloque el hook, y poder
      hacer las pruebas.
    .act: En caso de que en el hook se haga alguna acción de cambio de estado,
      o similares acciones asincronas, act lo que hace es que simula el
      functionamiento de nuestro hook en el navegador. Entonces, si probamos
      una función del hook que cambia estado, esta función debe ejecutarse
      dentro del callback que tiene act como parametro.

Montar el componente que lleva el hook:
  -Debe hacerse antes de cada prueba.
  -Guardamos en una variable, la ejecución de renderHook(), y le pasamos por
    parametro un callback, que retorne el hook (le damos a este los parametros
    respectivos).
  -De esta variable, principalmente vamos a usar su elemento result.current,
    que contiene lo que retorna el hook.

Probar:
  -Que el current sea definido (toBeDefined).
  -Sí queremos probar que alguno de los elementos tenga un valor en concreto,
    lo probamos con toEqual(value).
  -Sí alguno de los valores es una función, podemos probar que ese valor
    sea una funcion con toBeInstanceOf(Function). Function es un tipo.

Probar la función que actualiza el localStorage:
  -Al realizar nuestras pruebas, no tenemos un navegador que reciba el cambio de
    localStorage, por lo que debemos simular un localStorage con un mock.
  -Para ello, fuera de los test, vamos a colocar Object.defineProperty(), recibe:
    .window
    .'localStorage': Un string.
    .Un objeto, que tendra otro objeto llamado value, donde definiremos:
      ->getItem.
      ->setItem.
      ->clear.
      ->Cada uno de estos tendrá como valor jest.fn()
  -Con esto, podemos llamar a localStorage, sin necesidad de usarlo de window, solo llamando
    a localStorage.
  -Entonces, la logica es que, como nuestro hook tiene una función (en la posición 1) que
    utiliza setItem, sí ejecutamos esta función, llamara al mock con setItem.
  -Lo que podemos probar en este caso es lo siguiente:
    .Que la función del getItem se haya ejecutado una vez: Esto porque cuando se monta el
      hook, se llama a getItem de forma predeterminada, en el estado.
    .Que la función del setItem se haya ejecutado, porque esta se ejecuta al usar la función
      del hook.
    .Ambas podemos probarlas desde localStorage.[función], con toHaveBeenCalled().
  -Recordar que como setItem cambia estado, debe ejecutarse en act()